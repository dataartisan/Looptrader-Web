"""LoopTrader Web Interface - AdminLTE Flask Application"""

import os
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import check_password_hash, generate_password_hash
from datetime import datetime
import logging

from models.database import (
    SessionLocal, Bot, Strategy, Position, TrailingStopState, 
    BrokerageAccount, Order, get_dashboard_stats, get_recent_positions,
    test_connection
)

# Create Flask app
app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY', 'dev-secret-key-change-in-production')

# Setup Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'
login_manager.login_message = 'Please log in to access this page.'
login_manager.login_message_category = 'warning'

# Simple User class for demo (replace with real authentication)
class User(UserMixin):
    def __init__(self, id, username, email):
        self.id = id
        self.username = username
        self.email = email

# Demo users (replace with database authentication)
users = {
    'admin': User('1', 'admin', os.getenv('ADMIN_EMAIL', 'admin@looptrader.com'))
}

@login_manager.user_loader
def load_user(user_id):
    for user in users.values():
        if user.id == user_id:
            return user
    return None

# Template globals for AdminLTE
@app.context_processor
def inject_template_vars():
    return {
        'app_name': 'LoopTrader Pro',
        'app_version': '1.0.0',
        'current_year': datetime.now().year,
        'admin_name': os.getenv('ADMIN_NAME', 'Admin'),
        'admin_email': os.getenv('ADMIN_EMAIL', 'admin@looptrader.com')
    }

# Error handlers
@app.errorhandler(404)
def not_found_error(error):
    return render_template('errors/404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    return render_template('errors/500.html'), 500

# Authentication routes
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        # Simple authentication (replace with real authentication)
        if username == 'admin' and password == 'admin':
            user = users.get(username)
            login_user(user, remember=True)
            next_page = request.args.get('next')
            flash('Successfully logged in!', 'success')
            return redirect(next_page) if next_page else redirect(url_for('dashboard'))
        else:
            flash('Invalid username or password', 'danger')
    
    return render_template('auth/login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('You have been logged out', 'info')
    return redirect(url_for('login'))

# Main dashboard
@app.route('/')
@app.route('/dashboard')
@login_required
def dashboard():
    try:
        # Get dashboard statistics
        stats = get_dashboard_stats()
        recent_positions = get_recent_positions(limit=5)
        
        # Test database connection
        db_connected, db_message = test_connection()
        
        return render_template('dashboard.html', 
                             stats=stats, 
                             recent_positions=recent_positions,
                             db_connected=db_connected,
                             db_message=db_message)
    except Exception as e:
        app.logger.error(f"Dashboard error: {e}")
        flash(f'Error loading dashboard: {e}', 'danger')
        return render_template('dashboard.html', 
                             stats={}, 
                             recent_positions=[],
                             db_connected=False,
                             db_message=str(e))

# Bot management routes
@app.route('/bots')
@login_required
def bots():
    db = SessionLocal()
    try:
        bots = db.query(Bot).all()
        strategies = db.query(Strategy).all()
        return render_template('bots/list.html', bots=bots, strategies=strategies)
    except Exception as e:
        app.logger.error(f"Error loading bots: {e}")
        flash(f'Error loading bots: {e}', 'danger')
        return render_template('bots/list.html', bots=[], strategies=[])
    finally:
        db.close()

@app.route('/bots/<int:bot_id>')
@login_required
def bot_detail(bot_id):
    db = SessionLocal()
    try:
        bot = db.query(Bot).filter(Bot.id == bot_id).first()
        if not bot:
            flash('Bot not found', 'danger')
            return redirect(url_for('bots'))
        
        positions = db.query(Position).filter(Position.bot_id == bot_id).all()
        return render_template('bots/detail.html', bot=bot, positions=positions)
    except Exception as e:
        app.logger.error(f"Error loading bot {bot_id}: {e}")
        flash(f'Error loading bot: {e}', 'danger')
        return redirect(url_for('bots'))
    finally:
        db.close()

@app.route('/bots/<int:bot_id>/toggle_pause', methods=['POST'])
@login_required
def toggle_bot_pause(bot_id):
    db = SessionLocal()
    try:
        bot = db.query(Bot).filter(Bot.id == bot_id).first()
        if not bot:
            return jsonify({'success': False, 'message': 'Bot not found'})
        
        bot.paused = not bot.paused
        db.commit()
        
        action = 'paused' if bot.paused else 'resumed'
        return jsonify({
            'success': True, 
            'message': f'Bot {bot.name} {action} successfully',
            'paused': bot.paused
        })
    except Exception as e:
        db.rollback()
        app.logger.error(f"Error toggling bot pause {bot_id}: {e}")
        return jsonify({'success': False, 'message': str(e)})
    finally:
        db.close()

@app.route('/bots/<int:bot_id>/toggle_enabled', methods=['POST'])
@login_required
def toggle_bot_enabled(bot_id):
    db = SessionLocal()
    try:
        bot = db.query(Bot).filter(Bot.id == bot_id).first()
        if not bot:
            return jsonify({'success': False, 'message': 'Bot not found'})
        
        bot.enabled = not bot.enabled
        db.commit()
        
        action = 'enabled' if bot.enabled else 'disabled'
        return jsonify({
            'success': True, 
            'message': f'Bot {bot.name} {action} successfully',
            'enabled': bot.enabled
        })
    except Exception as e:
        db.rollback()
        app.logger.error(f"Error toggling bot enabled {bot_id}: {e}")
        return jsonify({'success': False, 'message': str(e)})
    finally:
        db.close()

# Strategy management routes
@app.route('/strategies')
@login_required
def strategies():
    db = SessionLocal()
    try:
        strategies = db.query(Strategy).all()
        return render_template('strategies/list.html', strategies=strategies)
    except Exception as e:
        app.logger.error(f"Error loading strategies: {e}")
        flash(f'Error loading strategies: {e}', 'danger')
        return render_template('strategies/list.html', strategies=[])
    finally:
        db.close()

# Position management routes
@app.route('/positions')
@login_required
def positions():
    db = SessionLocal()
    try:
        # Get filter parameters
        active_only = request.args.get('active_only', 'false').lower() == 'true'
        bot_id = request.args.get('bot_id', type=int)
        
        query = db.query(Position)
        
        if active_only:
            query = query.filter(Position.active == True)
        
        if bot_id:
            query = query.filter(Position.bot_id == bot_id)
        
        positions = query.order_by(Position.opened_datetime.desc()).all()
        bots = db.query(Bot).all()
        
        return render_template('positions/list.html', 
                             positions=positions, 
                             bots=bots,
                             active_only=active_only,
                             selected_bot_id=bot_id)
    except Exception as e:
        app.logger.error(f"Error loading positions: {e}")
        flash(f'Error loading positions: {e}', 'danger')
        return render_template('positions/list.html', positions=[], bots=[])
    finally:
        db.close()

# Trailing stop management routes
@app.route('/trailing-stops')
@login_required
def trailing_stops():
    db = SessionLocal()
    try:
        trailing_stops = db.query(TrailingStopState).all()
        bots = db.query(Bot).all()
        return render_template('trailing_stops/list.html', 
                             trailing_stops=trailing_stops, 
                             bots=bots)
    except Exception as e:
        app.logger.error(f"Error loading trailing stops: {e}")
        flash(f'Error loading trailing stops: {e}', 'danger')
        return render_template('trailing_stops/list.html', trailing_stops=[], bots=[])
    finally:
        db.close()

# API endpoints for AJAX calls
@app.route('/api/stats')
@login_required
def api_stats():
    try:
        stats = get_dashboard_stats()
        return jsonify(stats)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/health')
def api_health():
    db_connected, db_message = test_connection()
    return jsonify({
        'status': 'healthy' if db_connected else 'unhealthy',
        'database': db_message,
        'timestamp': datetime.utcnow().isoformat()
    })

if __name__ == '__main__':
    # Setup logging
    logging.basicConfig(level=logging.INFO)
    
    # Test database connection on startup
    db_connected, db_message = test_connection()
    if db_connected:
        app.logger.info(f"✅ {db_message}")
    else:
        app.logger.error(f"❌ {db_message}")
    
    # Run the app
    port = int(os.getenv('PORT', 5000))
    debug = os.getenv('FLASK_DEBUG', 'True').lower() == 'true'
    
    app.run(host='0.0.0.0', port=port, debug=debug)
